<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.baker.tool.mapper.ColumnInfoMapper">

    <resultMap id="BaseResultMap" type="cn.baker.tool.entity.ColumnInfo">
        <result property="id" column="column_id"/>
        <result property="tableName" column="table_name"/>
        <result property="columnName" column="column_name"/>
        <result property="columnType" column="column_type"/>
        <result property="dictName" column="dict_name"/>
        <result property="extra" column="extra"/>
        <result property="formShow" column="form_show"/>
        <result property="formType" column="form_type"/>
        <result property="keyType" column="key_type"/>
        <result property="listShow" column="list_show"/>
        <result property="notNull" column="not_null"/>
        <result property="queryType" column="query_type"/>
        <result property="remark" column="remark"/>
        <result property="dateAnnotation" column="date_annotation"/>
    </resultMap>

    <select id="getTables" resultType="cn.baker.tool.entity.vo.TableInfoVO">
        select `table_name`      as tableName,
               `create_time`     as createTime,
               `engine`          as engine,
               `table_collation` as tableCollation,
               `table_comment`   as tableComment
        from information_schema.tables
        where table_schema = (select database())
        order by create_time desc
    </select>


    <select id="getTablesByName" resultType="cn.baker.tool.entity.vo.TableInfoVO">
        select `table_name`      as tableName,
               `create_time`     as createTime,
               `engine`         as engine,
               `table_collation` as tableCollation,
               `table_comment`   as tableComment
        from information_schema.tables
        where table_schema = (select database())
        <if test="tbName != null and tbName != ''">
            and `table_name` like concat('%', #{tbName}, '%')
        </if>
        order by create_time desc
        limit #{start}, #{size}
    </select>

    <select id="getTablesByNameCount" resultType="java.lang.Integer">
        select count(1)
        from information_schema.tables
        where table_schema = (select database())
        <if test="tbName != null and tbName != ''">
            and `table_name` like concat('%', #{tbName}, '%')
        </if>
        order by create_time desc
    </select>


    <select id="queryByTableName" resultType="java.util.Map">
        select column_name    as columnName,
               is_nullable    as isNullable,
               data_type      as dataType,
               column_comment as columnComment,
               column_key     as columnKey,
               extra          as extra
        from information_schema.columns
        where table_name = #{tableName}
          and table_schema = (select database())
        order by ordinal_position
    </select>


    <select id="findByTableNameOrderByIdAsc" resultMap="BaseResultMap">
        select *
        from code_column_config
        where table_name = #{tableName}
        order by column_id asc
    </select>


    <insert id="batchInsert" parameterType="cn.baker.tool.entity.ColumnInfo">
        insert into code_column_config(`column_id`, `table_name`, `column_name`, `column_type`, `dict_name`, `extra`, `form_show`, `form_type`, `key_type`, `list_show`, not_null, `query_type`, `remark`, `date_annotation`)
        values
        <foreach collection="columnInfoList" item="columnInfo" index="index" separator=",">
            (null,#{columnInfo.tableName},#{columnInfo.columnName},#{columnInfo.columnType},#{columnInfo.dictName},#{columnInfo.extra},#{columnInfo.formShow},#{columnInfo.formType},#{columnInfo.keyType},#{columnInfo.listShow},#{columnInfo.notNull},#{columnInfo.queryType},#{columnInfo.remark},#{columnInfo.dateAnnotation})
        </foreach>
    </insert>

</mapper>
